import React, { Component, ReactNode } from "react";
import DefaultLoadIndicator from "./DefaultLoadIndicator";
export interface InfiniteLoaderInterface {
    loadingIndicator?: null | (() => ReactNode) | ReactNode;
    loadingIndicatorPosition?: string;
    hasMore: boolean;
    loadMore: null | (() => void);
}
interface State {
    scrollingContainer: HTMLElement | null;
    loadIndicatorContainer: HTMLDivElement | null;
    loading: boolean;
    prevItemsCount: number;
}
interface InfiniteLoaderProps extends InfiniteLoaderInterface {
    itemsCount: number;
}
declare class InfiniteLoader extends Component<InfiniteLoaderProps, State> {
    static propTypes: {
        itemsCount: import("prop-types").Requireable<number>;
        hasMore: import("prop-types").Validator<boolean>;
        loadMore: import("prop-types").Validator<(...args: any[]) => any>;
        loadingIndicator: import("prop-types").Requireable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>;
        loadingIndicatorPosition: import("prop-types").Requireable<string>;
    };
    static defaultProps: {
        loadingIndicatorPosition: string;
        loadingIndicator: typeof DefaultLoadIndicator;
    };
    state: State;
    loaderContainerRef: React.RefObject<HTMLDivElement>;
    lastScrollTop: number;
    mounted: boolean;
    currentItemsCount: number;
    componentDidMount(): void;
    componentDidUpdate(prevProps: InfiniteLoaderProps, prevState: State): void;
    componentWillUnmount(): void;
    reset(): void;
    getScrollingContainerChildrenCount: () => number;
    setupScrollingContainerEventsListener: (removeEvent?: boolean) => void;
    checkIfLoadingIsNeeded: () => void;
    render(): ReactNode;
}
export default InfiniteLoader;
//# sourceMappingURL=InfiniteLoader.d.ts.map