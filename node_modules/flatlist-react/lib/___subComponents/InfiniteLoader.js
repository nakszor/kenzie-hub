"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prop_types_1 = require("prop-types");
var isType_1 = require("../___utils/isType");
var DefaultLoadIndicator_1 = __importDefault(require("./DefaultLoadIndicator"));
var InfiniteLoader = /** @class */ (function (_super) {
    __extends(InfiniteLoader, _super);
    function InfiniteLoader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            prevItemsCount: _this.props.itemsCount,
            loadIndicatorContainer: null,
            loading: false,
            scrollingContainer: null,
        };
        _this.loaderContainerRef = (0, react_1.createRef)();
        // track the last scroll position so when new dom elements are inserted to avoid scroll jump
        _this.lastScrollTop = 0;
        _this.mounted = false;
        // keep track of the dom items in the list
        _this.currentItemsCount = 0;
        _this.getScrollingContainerChildrenCount = function () {
            var scrollingContainer = _this.state.scrollingContainer;
            if (scrollingContainer) {
                return Math.max(0, scrollingContainer.children.length);
            }
            return 0;
        };
        _this.setupScrollingContainerEventsListener = function (removeEvent) {
            if (removeEvent === void 0) { removeEvent = false; }
            var scrollingContainer = _this.state.scrollingContainer;
            if (scrollingContainer) {
                ["scroll", "mousewheel", "touchmove"].forEach(function (event) {
                    scrollingContainer.removeEventListener(event, _this.checkIfLoadingIsNeeded, true);
                    if (!removeEvent) {
                        scrollingContainer.addEventListener(event, _this.checkIfLoadingIsNeeded, true);
                    }
                });
            }
        };
        // show or hide loading indicators based on scroll position
        // calls the "loadMore" function when is needed
        _this.checkIfLoadingIsNeeded = function () {
            if (!_this.mounted || !_this.props.hasMore || _this.state.loading) {
                return;
            }
            var _a = _this.state, scrollingContainer = _a.scrollingContainer, loadIndicatorContainer = _a.loadIndicatorContainer;
            if (scrollingContainer && loadIndicatorContainer) {
                var scrollTop = scrollingContainer.scrollTop, offsetTop = scrollingContainer.offsetTop, offsetHeight = scrollingContainer.offsetHeight;
                _this.lastScrollTop = scrollTop;
                var loaderPosition = loadIndicatorContainer.offsetTop - scrollTop;
                var startingPoint = offsetTop + offsetHeight;
                if (loaderPosition <= startingPoint) {
                    _this.setState({ prevItemsCount: _this.props.itemsCount, loading: true }, function () {
                        _this.props.loadMore();
                    });
                }
            }
        };
        return _this;
    }
    InfiniteLoader.prototype.componentDidMount = function () {
        var _this = this;
        this.mounted = true;
        var loadIndicatorContainer = this.loaderContainerRef.current;
        if (loadIndicatorContainer) {
            this.setState({
                loadIndicatorContainer: loadIndicatorContainer,
                scrollingContainer: loadIndicatorContainer.parentNode,
            }, function () {
                _this.currentItemsCount = _this.getScrollingContainerChildrenCount();
                _this.setupScrollingContainerEventsListener();
            });
        }
        else {
            console.warn("FlatList: it was not possible to get container's ref. " +
                "Infinite scrolling pagination will not be possible");
        }
    };
    InfiniteLoader.prototype.componentDidUpdate = function (prevProps, prevState) {
        // reset scroll position to where last was
        if (this.state.scrollingContainer) {
            this.state.scrollingContainer.scrollTop = this.lastScrollTop;
        }
        // reset loading state when the list size changes
        if (prevProps.itemsCount !== this.props.itemsCount) {
            this.reset();
        }
        this.checkIfLoadingIsNeeded();
    };
    InfiniteLoader.prototype.componentWillUnmount = function () {
        this.setupScrollingContainerEventsListener(true);
        this.mounted = false;
    };
    // update the loading flags and items count whether "hasMore" is false or list changed
    InfiniteLoader.prototype.reset = function () {
        this.setState({ loading: false });
    };
    InfiniteLoader.prototype.render = function () {
        var loading = this.state.loading;
        var _a = this.props, hasMore = _a.hasMore, loadingIndicator = _a.loadingIndicator, loadingIndicatorPosition = _a.loadingIndicatorPosition;
        var spinning = hasMore && loading;
        // do not remove the element from the dom so the ref is not broken but set it invisible enough
        var styles = {
            display: "flex",
            height: spinning ? "auto" : 0,
            justifyContent: loadingIndicatorPosition === "center"
                ? loadingIndicatorPosition
                : loadingIndicatorPosition === "right"
                    ? "flex-end"
                    : "flex-start",
            padding: spinning ? "5px 0" : 0,
            visibility: spinning ? "visible" : "hidden",
        };
        var loadingEl = (0, isType_1.isFunction)(loadingIndicator)
            ? loadingIndicator()
            : loadingIndicator;
        return (react_1.default.createElement("div", { ref: this.loaderContainerRef, className: "__infinite-loader", style: styles }, spinning && (loadingIndicator ? loadingEl : react_1.default.createElement(DefaultLoadIndicator_1.default, null))));
    };
    InfiniteLoader.propTypes = {
        itemsCount: prop_types_1.number,
        hasMore: prop_types_1.bool.isRequired,
        loadMore: prop_types_1.func.isRequired,
        loadingIndicator: (0, prop_types_1.oneOfType)([prop_types_1.func, prop_types_1.node, prop_types_1.element]),
        loadingIndicatorPosition: (0, prop_types_1.oneOf)(["left", "center", "right", ""]),
    };
    InfiniteLoader.defaultProps = {
        loadingIndicatorPosition: "left",
        loadingIndicator: DefaultLoadIndicator_1.default,
    };
    return InfiniteLoader;
}(react_1.Component));
exports.default = InfiniteLoader;
//# sourceMappingURL=InfiniteLoader.js.map