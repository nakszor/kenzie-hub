"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var getType_1 = __importStar(require("./getType"));
var isType_1 = require("./isType");
var convertMapToObject_1 = __importDefault(require("./convertMapToObject"));
var convertAnythingToArrayOrObject = function (obj) {
    return (0, getType_1.default)(obj) === getType_1.types.SET
        ? Array.from(obj)
        : (0, getType_1.default)(obj) === getType_1.types.MAP
            ? (0, convertMapToObject_1.default)(obj)
            : (0, isType_1.isObject)(obj) || (0, isType_1.isArray)(obj)
                ? obj
                : {};
};
var getObjectDeepKeyValue = function (value, dotSeparatedKeys) {
    var convertedValue = convertAnythingToArrayOrObject(value);
    var convertedValueType = "";
    if ((0, isType_1.isString)(dotSeparatedKeys)) {
        var keys = dotSeparatedKeys.split(".");
        for (var i = 0; i < keys.length; i += 1) {
            var key = keys[i];
            if (convertedValue[key] === undefined) {
                console.error("Key \"".concat(key, "\" was not found in"), value);
                convertedValue = null;
                break;
            }
            if ((0, getType_1.default)(convertedValue[key]) === getType_1.types.SET) {
                convertedValue = Array.from(convertedValue[key]);
                convertedValueType = getType_1.types.SET;
            }
            else if ((0, getType_1.default)(convertedValue[key]) === getType_1.types.MAP) {
                convertedValue = (0, convertMapToObject_1.default)(convertedValue[key]);
                convertedValueType = getType_1.types.MAP;
            }
            else {
                convertedValue = convertedValue[key];
                convertedValueType = "";
            }
        }
        // convert convertedValue to its original form
        return convertedValueType === getType_1.types.SET
            ? new Set(convertedValue)
            : convertedValueType === getType_1.types.MAP
                ? new Map(Object.entries(convertedValue))
                : convertedValue;
    }
    throw new Error('getObjectDeepKeyValue: "dotSeparatedKeys" is not a dot separated values string');
};
exports.default = getObjectDeepKeyValue;
//# sourceMappingURL=getObjectDeepKeyValue.js.map