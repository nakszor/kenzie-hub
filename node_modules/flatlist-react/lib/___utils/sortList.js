"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var getObjectDeepKeyValue_1 = __importDefault(require("./getObjectDeepKeyValue"));
var isType_1 = require("./isType");
var defaultSortOptions = {
    caseInsensitive: false,
    descending: false,
    by: "",
};
var compareKeys = function (first, second, _a) {
    var _b = _a.key, key = _b === void 0 ? "" : _b, _c = _a.caseInsensitive, caseInsensitive = _c === void 0 ? false : _c, _d = _a.descending, descending = _d === void 0 ? false : _d;
    if (key) {
        first =
            (0, isType_1.isObject)(first) || (0, isType_1.isArray)(first)
                ? (0, getObjectDeepKeyValue_1.default)(first, key)
                : first;
        second =
            (0, isType_1.isObject)(second) || (0, isType_1.isArray)(second)
                ? (0, getObjectDeepKeyValue_1.default)(second, key)
                : second;
    }
    if (caseInsensitive) {
        first = (0, isType_1.isString)(first) ? first.toLowerCase() : first;
        second = (0, isType_1.isString)(second) ? second.toLowerCase() : second;
    }
    return first > second
        ? descending
            ? -1
            : 1
        : first < second
            ? descending
                ? 1
                : -1
            : 0;
};
var sortList = function (list, options) {
    if (options === void 0) { options = defaultSortOptions; }
    var listCopy = __spreadArray([], list, true);
    if ((0, isType_1.isNilOrEmpty)(options)) {
        options = defaultSortOptions;
    }
    options = __assign(__assign({}, defaultSortOptions), options);
    listCopy.sort(function (first, second) {
        if ((0, isType_1.isArray)(options.by)) {
            for (var i = 0; i < options.by.length; i += 1) {
                var key = options.by[i];
                var option = (0, isType_1.isObject)(key) ? key : __assign(__assign({}, options), { key: key });
                var res = compareKeys(first, second, option);
                if (res !== 0) {
                    return res;
                }
            }
            return 0;
        }
        return compareKeys(first, second, __assign(__assign({}, options), { key: options.by }));
    });
    return listCopy;
};
exports.default = sortList;
//# sourceMappingURL=sortList.js.map