import { Requireable } from 'prop-types';
import { ReactNode, Ref } from 'react';
import { DisplayHandlerProps, DisplayInterface } from './___subComponents/DisplayHandler';
import { InfiniteLoaderInterface } from './___subComponents/InfiniteLoader';
import { renderItem } from './___subComponents/uiFunctions';
import { GroupOptionsInterface } from './___utils/groupList';
import { SearchOptionsInterface } from './___utils/searchList';
import { SortOptionsInterface } from './___utils/sortList';
export declare type listItem = Array<{
    id?: string | number;
    [key: string]: any;
} | any> | Set<any> | Map<any, any> | {
    id?: string | number;
    [key: string]: any;
};
export interface GroupInterface extends GroupOptionsInterface {
    of?: number;
    separator?: ReactNode | ((g: any, idx: number, label: string) => ReactNode | null) | null;
    separatorAtTheBottom?: boolean;
    sortBy?: SortOptionsInterface['by'];
    sortDescending?: boolean;
    sortCaseInsensitive?: boolean;
}
export interface ScrollToTopInterface {
    button?: ReactNode | (() => JSX.Element);
    offset?: number;
    padding?: number;
    position?: string;
}
export interface SortInterface extends SortOptionsInterface {
    groupBy?: GroupInterface['sortBy'];
    groupDescending?: GroupInterface['sortDescending'];
    groupCaseInsensitive?: GroupInterface['sortCaseInsensitive'];
}
export interface FlatListProps {
    __forwarededRef?: Ref<HTMLElement>;
    list: listItem;
    renderItem: renderItem;
    renderWhenEmpty?: ReactNode | (() => JSX.Element);
    renderOnScroll?: boolean;
    limit?: number | string;
    reversed?: boolean;
    wrapperHtmlTag?: string;
    sort?: boolean | SortInterface;
    sortBy?: SortInterface['by'];
    sortCaseInsensitive?: SortInterface['caseInsensitive'];
    sortDesc?: SortInterface['descending'];
    sortDescending?: SortInterface['descending'];
    sortGroupBy?: GroupInterface['sortBy'];
    sortGroupDesc?: GroupInterface['sortDescending'];
    sortGroupDescending?: GroupInterface['sortDescending'];
    sortGroupCaseInsensitive?: GroupInterface['sortCaseInsensitive'];
    group?: GroupInterface;
    showGroupSeparatorAtTheBottom?: GroupInterface['separatorAtTheBottom'];
    groupSeparatorAtTheBottom?: GroupInterface['separatorAtTheBottom'];
    groupReversed?: GroupInterface['reversed'];
    groupSeparator?: GroupInterface['separator'];
    groupBy?: GroupInterface['by'];
    groupOf?: GroupInterface['limit'];
    groupSorted?: boolean;
    groupSortedDescending?: GroupInterface['sortDescending'];
    groupSortedCaseInsensitive?: GroupInterface['sortCaseInsensitive'];
    display?: DisplayInterface;
    displayRow?: DisplayHandlerProps['displayRow'];
    rowGap?: DisplayHandlerProps['rowGap'];
    displayGrid?: DisplayHandlerProps['displayGrid'];
    gridGap?: DisplayHandlerProps['gridGap'];
    minColumnWidth?: DisplayHandlerProps['minColumnWidth'];
    filterBy?: string | ((item: listItem, idx: number) => boolean);
    search?: SearchOptionsInterface;
    searchTerm?: SearchOptionsInterface['term'];
    searchBy?: SearchOptionsInterface['by'];
    searchOnEveryWord?: SearchOptionsInterface['everyWord'];
    searchCaseInsensitive?: SearchOptionsInterface['caseInsensitive'];
    searchableMinCharactersCount?: SearchOptionsInterface['minCharactersCount'];
    pagination?: InfiniteLoaderInterface;
    hasMoreItems?: InfiniteLoaderInterface['hasMore'];
    loadMoreItems?: null | InfiniteLoaderInterface['loadMore'];
    paginationLoadingIndicator?: InfiniteLoaderInterface['loadingIndicator'];
    paginationLoadingIndicatorPosition?: InfiniteLoaderInterface['loadingIndicatorPosition'];
    scrollToTop?: boolean | ScrollToTopInterface;
    scrollToTopButton?: ReactNode | (() => ReactNode);
    scrollToTopOffset?: number;
    scrollToTopPadding?: number;
    scrollToTopPosition?: string;
    [key: string]: any;
}
export declare const defaultProps: FlatListProps;
export declare const propTypes: {
    __forwarededRef: Requireable<object>;
    list: import("prop-types").Validator<object>;
    renderItem: import("prop-types").Validator<NonNullable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>>;
    limit: Requireable<NonNullable<string | number | null | undefined>>;
    renderWhenEmpty: Requireable<(...args: any[]) => any>;
    reversed: Requireable<boolean>;
    renderOnScroll: Requireable<boolean>;
    wrapperHtmlTag: Requireable<string>;
    display: Requireable<import("prop-types").InferProps<{
        grid: Requireable<boolean>;
        gridColumnWidth: Requireable<string>;
        gridGap: Requireable<string>;
        row: Requireable<boolean>;
        rowGap: Requireable<string>;
    }>>;
    displayGrid: Requireable<boolean>;
    displayRow: Requireable<boolean>;
    gridGap: Requireable<string>;
    rowGap: Requireable<string>;
    minColumnWidth: Requireable<string>;
    filterBy: Requireable<NonNullable<string | ((...args: any[]) => any) | null | undefined>>;
    group: Requireable<import("prop-types").InferProps<{
        by: Requireable<NonNullable<string | ((...args: any[]) => any) | null | undefined>>;
        limit: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => Error | null;
        of: Requireable<number>;
        reversed: Requireable<boolean>;
        separator: Requireable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>;
        separatorAtTheBottom: Requireable<boolean>;
        sortedBy: Requireable<NonNullable<string | (NonNullable<string | import("prop-types").InferProps<{
            by: Requireable<string>;
            caseInsensitive: Requireable<boolean>;
            descending: Requireable<boolean>;
        }> | null | undefined> | null | undefined)[] | null | undefined>>;
        sortBy: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => Error | null;
        sortedCaseInsensitive: Requireable<boolean>;
        sortCaseInsensitive: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => Error | null;
        sortedDescending: Requireable<boolean>;
        sortDescending: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => Error | null;
    }>>;
    groupBy: Requireable<NonNullable<string | ((...args: any[]) => any) | null | undefined>>;
    groupOf: Requireable<number>;
    groupReversed: Requireable<boolean>;
    groupSeparator: Requireable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>;
    groupSeparatorAtTheBottom: Requireable<boolean>;
    showGroupSeparatorAtTheBottom: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => Error | null;
    groupSorted: Requireable<boolean>;
    groupSortedBy: Requireable<NonNullable<string | (NonNullable<string | import("prop-types").InferProps<{
        by: Requireable<string>;
        caseInsensitive: Requireable<boolean>;
        descending: Requireable<boolean>;
    }> | null | undefined> | null | undefined)[] | null | undefined>>;
    groupSortedDescending: Requireable<boolean>;
    groupSortedCaseInsensitive: Requireable<boolean>;
    pagination: Requireable<import("prop-types").InferProps<{
        hasMore: Requireable<boolean>;
        loadMore: Requireable<(...args: any[]) => any>;
        loadingIndicator: Requireable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>;
        loadingIndicatorPosition: Requireable<string>;
    }>>;
    hasMoreItems: Requireable<boolean>;
    loadMoreItems: Requireable<(...args: any[]) => any>;
    paginationLoadingIndicator: Requireable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>;
    paginationLoadingIndicatorPosition: Requireable<string>;
    scrollToTop: Requireable<NonNullable<boolean | import("prop-types").InferProps<{
        button: Requireable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>;
        offset: Requireable<number>;
        padding: Requireable<number>;
        position: Requireable<string>;
    }> | null | undefined>>;
    scrollToTopButton: Requireable<NonNullable<import("prop-types").ReactNodeLike | ((...args: any[]) => any)>>;
    scrollToTopOffset: Requireable<number>;
    scrollToTopPadding: Requireable<number>;
    scrollToTopPosition: Requireable<string>;
    search: Requireable<import("prop-types").InferProps<{
        by: Requireable<NonNullable<string | ((...args: any[]) => any) | (NonNullable<string | import("prop-types").InferProps<{
            by: Requireable<string>;
            caseInsensitive: Requireable<boolean>;
        }> | null | undefined> | null | undefined)[] | null | undefined>>;
        caseInsensitive: Requireable<boolean>;
        everyWord: (props: {
            [key: string]: unknown;
        }, propName: string, componentName: string, ...rest: any) => Error | null;
        onEveryWord: Requireable<boolean>;
        minCharactersCount: Requireable<number>;
        term: Requireable<string>;
    }>>;
    searchBy: Requireable<NonNullable<string | ((...args: any[]) => any) | (NonNullable<string | import("prop-types").InferProps<{
        by: Requireable<string>;
        caseInsensitive: Requireable<boolean>;
    }> | null | undefined> | null | undefined)[] | null | undefined>>;
    searchCaseInsensitive: Requireable<boolean>;
    searchOnEveryWord: Requireable<boolean>;
    searchableMinCharactersCount: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => Error | null;
    searchMinCharactersCount: Requireable<number>;
    searchTerm: Requireable<string>;
    sort: Requireable<NonNullable<boolean | import("prop-types").InferProps<{
        by: Requireable<NonNullable<string | (NonNullable<string | import("prop-types").InferProps<{
            by: Requireable<string>;
            caseInsensitive: Requireable<boolean>;
            descending: Requireable<boolean>;
        }> | null | undefined> | null | undefined)[] | null | undefined>>;
        caseInsensitive: Requireable<boolean>;
        descending: Requireable<boolean>;
        groupBy: Requireable<string>;
        groupCaseInsensitive: Requireable<boolean>;
        groupDescending: Requireable<boolean>;
    }> | null | undefined>>;
    sortBy: Requireable<NonNullable<string | (NonNullable<string | import("prop-types").InferProps<{
        by: Requireable<string>;
        caseInsensitive: Requireable<boolean>;
        descending: Requireable<boolean>;
    }> | null | undefined> | null | undefined)[] | null | undefined>>;
    sortCaseInsensitive: Requireable<boolean>;
    sortDesc: Requireable<boolean>;
    sortDescending: Requireable<boolean>;
    sortGroupBy: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => Error | null;
    sortGroupDesc: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => Error | null;
    sortGroupCaseInsensitive: (props: {
        [key: string]: unknown;
    }, propName: string, componentName: string, ...rest: any) => Error | null;
};
//# sourceMappingURL=flatListProps.d.ts.map